#!/usr/bin/env node

let fretson = require("../");
let colors = require('colors');

const ArgumentParser = require('argparse').ArgumentParser;
const parser = new ArgumentParser({
    version: fretson.version,
    addHelp: true,
    description: 'Generates chords and scales with fretboard visualization'
});
const commands = parser.addSubparsers({
    title: 'commands',
    dest: 'command',
    metavar: ''
});

const show_parser = commands.addParser('show', {help: "shows a scale / mode / chord", addHelp: true});
show_parser.addArgument(['type'], {help: 'What to show', choices: ['scale', 'mode', 'chord']});
show_parser.addArgument(['root'], {help: 'The root note', choices: Object.keys(fretson.all_notes)});
show_parser.addArgument(['name'], {help: 'The name of the scale / mode / chord'});
show_parser.addArgument(['--fretboard'], {
    help: 'Shows the notes on the fretboard, up to FRET number of frets',
    metavar: 'FRET',
    default: 12
});

commands.addParser('list-scales', {help: "lists all the available scales", addHelp: true});

commands.addParser('list-chords', {help: "lists all the available chords", addHelp: true});

const explain_parser = commands.addParser('explain', {help: "explains a scale / mode / chord", addHelp: true});
explain_parser.addArgument(['what'], {help: 'What to explain', choices: ['scale', 'mode', 'chord']});
explain_parser.addArgument(['name'], {help: 'The name of the scale / mode / chord'});


const args = parser.parseArgs();

switch (args['command']) {
    case "show":
        let notes = get_notes(args['type'], args['root'], args['name']);
        let fretboard = Number.parseInt(args['fretboard']);
        if (fretboard > 0) {
            console.log(generate_fretboard(fretson.tunings.standard, notes.map(note => note.name), fretboard));
        } else {
            console.log(notes_to_string(notes));
        }
        break;
    case "list-scales":
        console.log(Object.keys(fretson.scales).join("\n"));
        break;
    case "list-chords":
        console.log(Object.keys(fretson.chords).join("\n"));
        break;
    case "explain":
        switch (args['what']) {
            case 'scale':
                intervals = fretson.scales[args['name']].intervals;
                console.log("intervals: " + interval_names(intervals));
                console.log("steps:     " + interval_steps(intervals));
                break;
            case 'chord':
                intervals = fretson.chords[args['name']].intervals;
                console.log("intervals: " + interval_names(intervals));
                break;
            case 'mode':
                intervals = fretson.scaleModes[args['name']].intervals;
                console.log("intervals: " + interval_names(intervals));
                console.log("steps:     " + interval_steps(intervals));
                break;
        }
        break;
}

function interval_names(intervals) {
    return intervals.map(interval => fretson.intervals[interval].short).join(" ");
}

function interval_steps(intervals) {
    function step(distance) {
        switch (distance) {
            case 1:
                return "h";
            case 2:
                return "w";
            default:
                return distance;
        }
    }

    let result = [];
    for (i = 1; i < intervals.length; ++i) {
        result.push(step(intervals[i] - intervals[i - 1]));
    }
    result.push(step(12 - intervals[intervals.length - 1]));
    return result.join(" ");
}

function get_notes(mode, root, name) {
    switch (mode) {
        case "chord":
            return fretson.notesInChord(fretson.note(root), name);
        case "scale":
            return fretson.notesInScale(fretson.note(root), name);
        case "mode":
            return fretson.notesInScaleMode(fretson.note(root), name);
    }
    return [];
}

function notes_to_string(notes) {
    return notes.map(note => note.name).reduce((acc, note) => acc + " " + note);
}

function generate_fretboard(tuning, notes, fret_count) {
    let result = generate_fretboard_string_meta(fret_count) + "\n";
    tuning.strings.reverse().forEach(string =>
        result += generate_fretboard_string(string, notes, fret_count) + "\n"
    );
    return result;
}

function generate_fretboard_string_meta(fret_count) {
    let meta = [' ', ' ', '.', ' ', '.', ' ', '.', ' ', '.', ' ', ' ', ':'];

    let result = "    ";
    for (i = 0; i < fret_count; ++i) {
        result += "  " + meta[i % 12] + "   ";
    }
    return result;
}
function generate_fretboard_string(string, notes, fret_count) {
    let note = fretson.note(string);
    let result = " " + note.name + " |";
    while (fret_count > 0) {
        note = note.nextNote();
        if (notes.indexOf(note.name) > -1) {
            result += note.name.length == 1 ? "--" + note.name.bold.green + "--|" : "--" + note.name.bold.green + "-|";
        } else {
            result += "-----|";
        }
        fret_count -= 1;
    }
    return result;
}